/* eslint-disable no-useless-escape */
import { z } from 'zod'

import * as GeneratorSchema from '@/schemas/generator'

const FilterSchema = GeneratorSchema.FilterSchema.describe(
  'Filter the requests by path, for example /users/1234. Use empty string when matching all requests'
)

const BeginEndSelectorSchema = GeneratorSchema.BeginEndSelectorSchema.extend({
  // For some reason OpenAI does not respect z.literal strings and would
  // return an invalid value, but works perfectly fine with single value enum
  type: z.enum(['begin-end']),
}).describe(`
Used to match value when being and end string are known.  example:
  headers:
    Authorization: Bearer 123;
  begin: Bearer
  end: ;
  extracted value: 123

  body:
    {"product":{"id":"1234"}}
  begin: {"product":{"id":"
  end: "}}
  extracted value: 1234

  url:
    https://example.com/users/321/posts
  begin: /users/
  end: /posts
  extracted value: 321
`)

const HeaderNameSelectorSchema =
  GeneratorSchema.HeaderNameSelectorSchema.extend({
    type: z.enum(['header-name']),
  }).describe(`
Used to match header value by header name. For example:
  headers:
    content-type: application/json
  name: content-type
  extracted value: application/json
`)

const RegexSelectorSchema = GeneratorSchema.RegexSelectorSchema.extend({
  type: z.enum(['regex']),
}).describe(`
Used to match value by regex, must have a capture group.

  Examples:

  url:
    https://example.com/organizations/3238475/subscriptions
  regex: organizations/(\d+)/subscriptions
  extracted value: 3238475

  headers:
    set-cookie: sessionId=1234; path=/; domain=example.com
  regex: sessionId=(\d+)
  extracted value: 1234

  body:
    <div><product id="1234"></div>
  regex: <product id="(\d+)">
  extracted value: 1234
`)

const JsonSelectorSchema = GeneratorSchema.JsonSelectorSchema.extend({
  type: z.enum(['json']),
  from: z.enum(['body']),
}).describe(`
Used to match value by json path. For example:
  json:
    {"users":[{"id":1234,"name":"John"}]}
  path:
    users[0].id
  extracted value: 1234
`)

const ExtractorSelectorSchema = z.discriminatedUnion('type', [
  BeginEndSelectorSchema,
  RegexSelectorSchema,
  JsonSelectorSchema,
  HeaderNameSelectorSchema,
])

const CorrelationExtractorSchema = z.object({
  filter: FilterSchema,
  selector: ExtractorSelectorSchema,
  extractionMode: z
    .enum(['single', 'multiple'])
    .default('single')
    .describe(
      'single: use the first extracted value; multiple: use the latest value when extracted from multiple requests'
    ),
})

export const AiCorrelationRuleSchema = z.object({
  id: z.string().describe('Unique identifier for the rule'),
  type: z.enum(['correlation']),
  extractor: CorrelationExtractorSchema,
  enabled: z.literal(true),
}).describe(`
  Correlation rules are used when certain values are generated by a response
  and used in subsequent requests.

  Examples:

  1. A session token is returned in a login response and used in subsequent requests
  2. A user ID is returned in a create user response and used in subsequent requests
  3. A resource ID is returned in a create resource response and used in subsequent requests
  4. A CSRF token is returned in a form response and used in subsequent form submissions

  The matched values will be replaced in subsequent request by exact text match
`)

export type AiCorrelationRule = z.infer<typeof AiCorrelationRuleSchema>
